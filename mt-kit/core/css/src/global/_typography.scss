@use 'sass:math';
@use '../theme' as *;
@use '../utilities/mixins' as *;
@use '../global/links' as *;

// Modular type scales
// By: Tim Brown
// https://alistapart.com/article/more-meaningful-typography/
$type-scales: (
  'minorSecond': 1.067,
  'majorSecond': 1.125,
  'minorThird': 1.2,
  'majorThird': 1.25,
  'perfectFourth': 1.333,
  'augmentedFourth': 1.414,
  'perfectFifth': 1.5,
  'goldenRatio': 1.618,
);

@function type-ratio($scale) {
  @if (map-get($type-scales, $scale)) {
    // Return ratio value if found
    @return map-get($type-scales, $scale);
  } @else if(type-of($scale) == number) {
    // Return passed ratio
    @return $scale;
  } @else {
    // Format not allowed
    @error "$type-scale must an integer or one of the allowed strings from $type-scales";
  }
}

// Typography variables
$type-base-size: 1rem !default;
$type-scale: 'perfectFourth' !default;

// Select by key of map
$type-scale-ratio: type-ratio($type-scale);

// List in descending order to prevent extra sort function
// Limited to high-touch heading styles
$type-levels: 4, 3, 2, 1;

// Size variable to iterate size value
$level-size: $type-base-size;

// stylelint-disable
@each $level in $type-levels {
  // Compute level size
  $level-size: $level-size * $type-scale-ratio;

  // Output heading styles
  // Assign to element and create utility class
  .mt-h#{$level} {
    font-size: $level-size;

    // Recommendation courtesy of this brilliant work:
    // @link https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
    // line-height: calc(2px + 2ex + 2px);

    // Set with `em` to be relative to current `font-size`
    // margin-bottom: 0.65em;

    // Limit in place based on testing -> smaller ratios are
    // prematurely or unnecessarily reduced
    @if ($type-scale-ratio > 1.2) {
      // Fluid type styles

      // Remove unit for calculations
      $level-unitless: math.div($level-size, $level-size * 0 + 1);

      // Set minimum size to a percentage less than $level-size
      // Reduction is greater for large font sizes (> 4rem) to help
      // prevent overflow due to font-size on mobile devices
      $fluid-reduction: if($level-size > 4, 0.5, 0.33);
      $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

      // Prevent dropping lower than 1rem (body font-size)
      $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

      // Adjust max modifier slightly per level to prevent "same" size
      // or lower levels appearing larger than higher levels
      // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
      $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

      font-size: clamp(#{$fluid-min}rem, #{$fluid-scaler} + 1rem, #{$level-size});
    }
  }
}
// stylelint-enable

// :is() unprefixed support July 2021: 90%+
//:is(h1, h2, h3, h4, .h1, .h2, .h3, .h4) {
.mt-h1,
.mt-h2,
.mt-h3,
.mt-h4 {
  line-height: calc(2px + 2ex + 2px);
  // Help prevent overflow of long words/names/URLs
  overflow-wrap: break-word;
}
.mt-h1,
.mt-h2,
.intro {
  font-weight: var(--font-weight-light);
}
.mt-h3 {
  font-weight: var(--font-weight-normal);
}
.mt-h4 {
  font-weight: var(--font-weight-bold);
}
.mt-h5,
.mt-h6 {
  font-size: $font-size-h4;
}
$content-selectors: '.content' !default;

#{$content-selectors} {
  --content-spacer: var(--spacer-xx-small);

  > * + * {
    margin-top: var(--content-spacer);
  }

  > * + .mt-h2,
  > * + .mt-h3,
  > .mt-h3,
  > * + .mt-h4,
  > .mt-h4 {
    margin-top: var(--spacer-medium);
  }

  > a:not([class]) {
    display: inline-block;
  }

  blockquote {
    padding: 0.5em 1.5em;
    border-left: 2px solid var(--color-primary);
    font-size: 1rem * $type-scale-ratio;
  }

  hr {
    margin: 8vh 5vw;
    border-style: dashed;
    border-color: var(--color-primary);
  }
}

.mt-strong {
  font-weight: var(--font-weight-bold);
}
.text-small {
  font-size: $font-size-small;
}
.text-body {
  font-size: $font-size-body;
}
.text-h3 {
  font-size: $font-size-h3;
}
.text-h4 {
  font-size: $font-size-h4;
}
.text-align-right {
  text-align: right;
}
.font-normal {
  font-weight: var(--font-weight-normal);
}
.text {
  @include xp-html-area;
  a {
    @extend .mt-link;

    &.is-external {
      display: inline-block;
      &::before {
        display: none;
      }
      &::after {
        content: var(--icon-external-link);
        display: inline-block;
        margin-left: var(--spacer-xxx-small);
        vertical-align: middle;
      }
    }
  }

  h1 {
    @extend .mt-h1;
  }
  h2 {
    @extend .mt-h2;
  }
  h3 {
    @extend .mt-h3;
  }
  h4 {
    @extend .mt-h4;
  }
  h5 {
    @extend .mt-h5;
  }
  h6 {
    @extend .mt-h6;
  }
}
.children-spaced-xxs {
  @include children-spaced(var(--spacer-xx-small));
}

.mt-h1,
.mt-h2,
.mt-h3,
.mt-h4,
.mt-h5,
.mt-h6,
th,
td,
a,
.mt-button,
dl,
ul,
ol,
p {
  word-break: break-word;
}

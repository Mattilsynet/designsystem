@use '../theme' as *;

@mixin focus-outline() {
  &.focus,
  &:focus {
    outline: none;
    box-shadow: $focus-box-shadow;
  }

  &:focus:not(:focus-visible) {
    outline: none;
  }

  &:focus-visible {
    outline: none;
    box-shadow: $focus-box-shadow;
  }
}

@mixin form-inputs-hover-style {
  outline: $border-width-small solid var(--form-border-color-hover);
  border-color: var(--form-border-color-hover);
}

@mixin disabled {
  &:disabled,
  &[disabled],
  &.disabled {
    pointer-events: none;
    filter: none;
    opacity: 0.5;
  }
}

@mixin error-style {
  &.error {
    $error-focus-color: var(--color-error-50);

    border: $border-width-regular solid var(--color-error);

    &:focus {
      border-color: var(--color-error);
      outline: none;
    }
  }
}

@mixin radio-check-error-style {
  &.error {
    + .mt-label {
      color: var(--color-error);
    }
  }
}

@mixin children-spaced($spacer: var(--spacer-large)) {
  > * + * {
    margin-top: $spacer;
  }
}

@mixin xp-html-area {
  @include children-spaced(var(--space-content));

  --space-section: var(--spacer-medium);
  --space-sub-section: var(--spacer-small);
  --space-content: var(--spacer-xx-small);

  > h2 {
    margin-top: var(--spacer-medium);
    &.inclusively-hidden {
      + h3 {
        margin-top: 0;
      }
    }
  }

  > h3,
  > h4 {
    margin-top: var(--spacer-x-small);
  }
  ul {
    padding-left: var(--spacer-medium);
    li {
      line-height: 140%;
      & + li {
        margin-top: var(--spacer-xx-small);
      }
    }
  }
}

@mixin card-article {
  @include children-spaced(var(--spacer-x-small));

  padding: var(--spacer-x-small);

  .title {
    margin-top: 0;
    overflow-wrap: anywhere;
    word-break: break-word;
  }
  .intro {
    font-size: $font-size-body;
    font-style: italic;
  }

  .text {
    @include xp-html-area;
  }
}
@mixin article-spacing {
  --space-section: var(--spacer-small);
  --space-sub-section: var(--spacer-x-small);
  --space-content: var(--spacer-xx-small);

  display: grid;
  grid-template-columns: repeat(12, minmax(0, 1fr));

  > * {
    grid-column: span 12;
  }
  ul,
  ol,
  .intro,
  .task,
  .highlighted-link,
  .form-intro-module,
  .disclosure,
  > * + p {
    margin-top: var(--space-content);
  }

  > .meta + p,
  .mt-figure {
    margin-top: var(--spacer-x-small);
  }

  table {
    margin-top: var(--spacer-large);
  }

  h2 {
    margin-top: var(--space-section);
    + h3 {
      margin-top: var(--space-content);
    }
  }

  > h3,
  > h4 {
    margin-top: var(--space-sub-section);
  }
  > h4 + *,
  > .mt-h4 + * {
    margin-top: 0;
  }

  .text {
    @include xp-html-area;
  }

  .meta {
    margin-top: var(--spacer-x-small);
  }

  section {
    > .inclusively-hidden + * {
      margin-top: var(--space-section);
    }
    &.table-of-contents {
      margin: var(--spacer-large) 0 0;
      h2 {
        margin-top: 0;
      }
      & + * {
        margin-top: var(--spacer-large);
      }
    }
  }
}

@mixin background-color-on-hover($color) {
  &:hover {
    background-color: $color;
    @media (prefers-reduced-motion: no-preference) {
      transition: background-color $transition-ms-300 ease;
    }
    @content;
  }
}

@mixin background-color-on-active($color) {
  &:active {
    background-color: $color;
    @media (prefers-reduced-motion: no-preference) {
      transition: background-color $transition-ms-100 ease;
    }
    @content;
  }
}

@mixin apply-icon($icon, $position: 'before', $direction: 'down', $open-state-icon: null) {
  $valid-directions: down, up, right, left;
  $pseudo: before, after;

  @if not index($valid-directions, $direction) {
    @error "Unknown direction value '#{$direction}' at $dir. $dir can only be of value 'down' | 'up' | 'right' | 'left'.";
  }

  @if not index($pseudo, $position) {
    @error "Unknown position value '#{$position}' at $position. $position can only be of value 'before' | 'after'.";
  }

  $icon-directions: (
    'down': 0,
    'up': -180,
    'right': -90,
    'left': 90,
  );

  $dir-mapped-to-rotate: map-get($icon-directions, #{$direction});
  $calc-open-rotation: calc($dir-mapped-to-rotate - 180);

  &:#{$position},
  &::#{$position} {
    content: '';
    display: inline-block;
    background: no-repeat center $icon;
    width: $icon-size-x-large;
    height: $icon-size-x-large;
    @if ($direction != 'down') {
      transform: rotate(#{$dir-mapped-to-rotate}deg);
    }
    @media (prefers-reduced-motion: no-preference) {
      transition: transform $transition-ms-300 ease;
    }
    @content;
  }

  &[aria-expanded='true']::#{$position} {
    @if $open-state-icon != null {
      background: no-repeat center $open-state-icon;
    }
    transform: rotateX(#{$calc-open-rotation}deg);
    @media (prefers-reduced-motion: no-preference) {
      transition: transform $transition-ms-300 ease;
    }
  }
}

@mixin apply-external-link-icon($icon: $icon-external-link, $position, $target-child: null) {
  $pseudo: before, after;
  $margin-side: if($position == after, left, right);

  @if not index($pseudo, $position) {
    @error "Unknown position of value '#{$position}' at $position. $position can only be of value before or after";
  }

  &[href]:not(:where(
    [href^='#'],
    [href^='?'],
    [href^='..'],
    [href^='tel:'],
    [href^='mailto:'],
    [href^='/']:not([href^='//']),
    [href*='mattilsynet.no']:not([href*='hoering.mattilsynet']),
    [href*='mattilsynet-xp7qa.enonic.cloud'],
    [href*='mattilsynet-xp7prod.enonic.cloud']
    )) {
    @if $target-child != null {
      &::before {
        display: none;
      }
      @each $target in $target-child {
        #{$target-child} {
          @include apply-icon($icon: $icon, $position: $position) {
            vertical-align: middle;
            margin-#{$margin-side}: $spacer-xxx-small;
          }
        }
      }
    } @else {
      @include apply-icon($icon: $icon, $position: $position) {
        flex-shrink: 0;

        @if $position == after {
          vertical-align: middle;
        }
      }
    }
    @if $position == after and $target-child == null {
      display: inline;
      &::before {
        display: none;
      }
    } @else {
      display: inline-flex;
      align-items: flex-start;
      gap: $spacer-xxx-small;
    }
    @content;
  }
}
